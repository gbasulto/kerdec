// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __kerdec_RcppExports_h__
#define __kerdec_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace kerdec {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("kerdec", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("kerdec", "kerdec_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in kerdec");
            }
        }
    }

    inline arma::vec ft_kernel_cpp(arma::mat t, int ker) {
        typedef SEXP(*Ptr_ft_kernel_cpp)(SEXP,SEXP);
        static Ptr_ft_kernel_cpp p_ft_kernel_cpp = NULL;
        if (p_ft_kernel_cpp == NULL) {
            validateSignature("arma::vec(*ft_kernel_cpp)(arma::mat,int)");
            p_ft_kernel_cpp = (Ptr_ft_kernel_cpp)R_GetCCallable("kerdec", "kerdec_ft_kernel_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ft_kernel_cpp(Rcpp::wrap(t), Rcpp::wrap(ker));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec ecf_re_cpp(arma::mat t, arma::mat smp) {
        typedef SEXP(*Ptr_ecf_re_cpp)(SEXP,SEXP);
        static Ptr_ecf_re_cpp p_ecf_re_cpp = NULL;
        if (p_ecf_re_cpp == NULL) {
            validateSignature("arma::vec(*ecf_re_cpp)(arma::mat,arma::mat)");
            p_ecf_re_cpp = (Ptr_ecf_re_cpp)R_GetCCallable("kerdec", "kerdec_ecf_re_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ecf_re_cpp(Rcpp::wrap(t), Rcpp::wrap(smp));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec ecf_im_cpp(arma::mat t, arma::mat smp) {
        typedef SEXP(*Ptr_ecf_im_cpp)(SEXP,SEXP);
        static Ptr_ecf_im_cpp p_ecf_im_cpp = NULL;
        if (p_ecf_im_cpp == NULL) {
            validateSignature("arma::vec(*ecf_im_cpp)(arma::mat,arma::mat)");
            p_ecf_im_cpp = (Ptr_ecf_im_cpp)R_GetCCallable("kerdec", "kerdec_ecf_im_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ecf_im_cpp(Rcpp::wrap(t), Rcpp::wrap(smp));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec ecf_mod_cpp(arma::mat t, arma::mat smp) {
        typedef SEXP(*Ptr_ecf_mod_cpp)(SEXP,SEXP);
        static Ptr_ecf_mod_cpp p_ecf_mod_cpp = NULL;
        if (p_ecf_mod_cpp == NULL) {
            validateSignature("arma::vec(*ecf_mod_cpp)(arma::mat,arma::mat)");
            p_ecf_mod_cpp = (Ptr_ecf_mod_cpp)R_GetCCallable("kerdec", "kerdec_ecf_mod_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ecf_mod_cpp(Rcpp::wrap(t), Rcpp::wrap(smp));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::cx_vec ecf_cpp(arma::mat t, arma::mat smp) {
        typedef SEXP(*Ptr_ecf_cpp)(SEXP,SEXP);
        static Ptr_ecf_cpp p_ecf_cpp = NULL;
        if (p_ecf_cpp == NULL) {
            validateSignature("arma::cx_vec(*ecf_cpp)(arma::mat,arma::mat)");
            p_ecf_cpp = (Ptr_ecf_cpp)R_GetCCallable("kerdec", "kerdec_ecf_cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ecf_cpp(Rcpp::wrap(t), Rcpp::wrap(smp));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::cx_vec >(__result);
    }

}

#endif // __kerdec_RcppExports_h__
